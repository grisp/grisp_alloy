#!/usr/bin/env bash

# Usage: build-system.sh [-d] TARGET
# e.g.   build-system.sh grisp2

set -e

BR_VERSION="2020.08"

source "$( dirname "$0" )/scripts/common.sh"

show_usage()
{
    echo "USAGE: build-system.sh [-d] [-c] TARGET"
    echo "  e.g. build-system.sh grisp2"
}

# Parse script's arguments
OPTIND=1
TARGET=""
DEBUG="${DEBUG:-0}"
CLEAN="false"
while getopts "hdc" opt; do
    case "$opt" in
    h)
        show_usage
        exit 0
        ;;
    d)
        DEBUG=1
        ;;
    c)
        CLEAN="true"
        ;;
    esac
done
shift $((OPTIND-1))
[[ "${1:-}" == "--" ]] && shift
if [[ $# -eq 0 ]]; then
    echo "ERROR: Missing argument"
    show_usage
    exit 1
fi
TARGET="$1"
shift
if [[ $# > 0 ]]; then
    echo "ERROR: Too many arguments"
    show_usage
    exit 1
fi

set_debug_level $DEBUG

if [[ $HOST_OS != "linux" ]]; then
    error 1 "${HOST_OS} is not support, only linux"
fi

if [[ $HOST_ARCH != "x86_64" ]]; then
    error 1 "$HOST_ARCH is not supported, only x86_64"
fi

COMMON_SYSTEM_DIR="$GLB_TOP_DIR/system_common"
TARGET_SYSTEM_DIR="$GLB_TOP_DIR/system_${TARGET}"
COMMON_SYSTEM_DEFCONFIG="${COMMON_SYSTEM_DIR}/defconfig"
TARGET_SYSTEM_DEFCONFIG="${TARGET_SYSTEM_DIR}/defconfig"
COMMON_SYSTEM_VER="$( cat "${COMMON_SYSTEM_DIR}/VERSION" )"
TARGET_SYSTEM_VER="$( cat "${TARGET_SYSTEM_DIR}/VERSION" )"
HOST_DIR="${GLB_SDK_BASE_DIR}/${COMMON_SYSTEM_VER}/${TARGET}/${TARGET_SYSTEM_VER}/host"

if [ ! -d "$TARGET_SYSTEM_DIR" ]; then
    error 1 "Target ${TARGET} not supported, directory not found: ${TARGET_SYSTEM_DIR}"
fi

if [ ! -f "$COMMON_SYSTEM_DEFCONFIG" ]; then
    error 1 "File not found: ${COMMON_SYSTEM_DEFCONFIG}"
fi

if [ ! -f "$TARGET_SYSTEM_DEFCONFIG" ]; then
    error 1 "File not found: ${TARGET_SYSTEM_DEFCONFIG}"
fi

BUILDROOT_PATH="${GLB_SYSTEM_BUILD_DIR}/buildroot"
BUILD_DIR="${GLB_SYSTEM_BUILD_DIR}/build"
FINAL_DEFCONFIG="${BUILD_DIR}/defconfig"
CHECKPOINTS_DIR="${GLB_SYSTEM_BUILD_DIR}/checkpoints"

BUILDROOT_MAKE_PARAMS=(
    -C "$BUILDROOT_PATH" \
    O="$BUILD_DIR" \
    BR2_EXTERNAL="$COMMON_SYSTEM_DIR" \
    BR2_DEFCONFIG="$FINAL_DEFCONFIG" \
    GRISP_TOP_DIR="$GLB_TOP_DIR" \
    GRISP_COMMON_SYSTEM_DIR="$COMMON_SYSTEM_DIR" \
    GRISP_TARGET_SYSTEM_DIR="$TARGET_SYSTEM_DIR" \
    GRISP_TARGET_NAME="$TARGET" \
    GLB_DEBUG="$GLB_DEBUG"
    # BR2_INSTRUMENTATION_SCRIPTS="$COMMON_SYSTEM_DIR/scripts/debug.sh"
)

    # DEFCONFIG="$TARGET_SYSTEM_DEFCONFIG" \

if [[ $CLEAN == "true" ]]; then
    rm -rf "$CHECKPOINTS_DIR"
fi

prepare_environment()
{
    echo "Preparing environment..."
    rm -rf "$GLB_SYSTEM_BUILD_DIR"
    rm -rf "$GLB_SDK_BASE_DIR"/*
    mkdir -p "$GLB_ARTEFACTS_DIR"
    mkdir -p "$GLB_SYSTEM_BUILD_DIR"
    mkdir -p "$GLB_SYSTEM_CACHE_DIR"
    mkdir -p "$CHECKPOINTS_DIR"
    mkdir -p "$BUILD_DIR"
    sudo mkdir -p "$GLB_SDK_BASE_DIR"
    sudo chown -R $USER:$USER "$GLB_SDK_BASE_DIR"

    cat > "$FINAL_DEFCONFIG" << EOF
########## GENERATED BY BUILDING SCRIPT
BR2_HOST_DIR="${HOST_DIR}"

########## FROM COMMON SYSTEM ${COMMON_SYSTEM_VER}
$( cat "$COMMON_SYSTEM_DEFCONFIG" )

########## FROM ${TARGET} TARGET SYSTEM ${TARGET_SYSTEM_VER}
$( cat "$TARGET_SYSTEM_DEFCONFIG" )
EOF
}

checkout_source_code()
{
    local extracted_dir="${GLB_SYSTEM_BUILD_DIR}/buildroot-${BR_VERSION}"
    local tarball_name="buildroot-${BR_VERSION}.tar.gz"
    local tarball_path="${GLB_ARTEFACTS_DIR}/${tarball_name}"

    # Clean up in case previous extraction failed.
    rm -fr "$extracted_dir" "$BUILDROOT_PATH"

    if [[ ! -e "$tarball_path" ]]; then
        echo "Downloading buildroot ${BR_VERSION}..."

        if [[ $BR_VERSION =~ 20[0-9][0-9]\.[0-1][0-9] ]]; then
            # This is an official release and is hosted on the main
            # download site.
            local download_url="https://buildroot.org/downloads/${tarball_name}"
        else
            # This is an intermediate release and can be downloaded from
            # Buildroot's cgit instance.
            local download_url="https://git.busybox.net/buildroot/snapshot/${tarball_name}"
        fi

        cd "${GLB_ARTEFACTS_DIR}"
        wget "$download_url"
        local ret="$?"
        if [ $ret != 0 ]; then
            error $ret "Failed to download ${tarball_name} from location ${download_url}"
        fi
    else
        echo "Buildroot ${BR_VERSION} already cached."
    fi

    echo "Extracting buildroot ${BR_VERSION}..."
    # Extract the cached tarball. We can't rely on the first level
    # directory naming, so force it to the expected path
    mkdir -p "$extracted_dir"
    tar xzf "$tarball_path" -C "$extracted_dir" --strip-components=1

    # Symlink for easier access
    ln -s "$extracted_dir" "$BUILDROOT_PATH"

    echo "Applying buildroot ${BR_VERSION} patches..."
    "${BUILDROOT_PATH}/support/scripts/apply-patches.sh" "${BUILDROOT_PATH}" "$COMMON_SYSTEM_DIR/patches/buildroot"

    ln -sf "$GLB_SYSTEM_CACHE_DIR" "${BUILDROOT_PATH}/dl"
}

prepare_buildroot()
{
    echo "Configuring buildroot for $TARGET..."
    make "${BUILDROOT_MAKE_PARAMS[@]}" defconfig
}

configure_buildroot()
{
    echo "Configuring buildroot for $TARGET..."
    make "${BUILDROOT_MAKE_PARAMS[@]}" menuconfig
}

run_buildroot()
{
    echo "Run buildroot for $TARGET..."
    make "${BUILDROOT_MAKE_PARAMS[@]}"
}

make_system()
{
    echo "Run buildroot for $TARGET..."
    make "${BUILDROOT_MAKE_PARAMS[@]}" system
}

checkpoint prepare_environment "$CHECKPOINTS_DIR"
checkpoint checkout_source_code "$CHECKPOINTS_DIR"
checkpoint prepare_buildroot "$CHECKPOINTS_DIR"
checkpoint run_buildroot "$CHECKPOINTS_DIR"
make_system

echo "Done"
