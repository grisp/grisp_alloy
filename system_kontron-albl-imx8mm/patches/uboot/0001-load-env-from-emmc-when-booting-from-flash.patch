--- a/board/kontron/sl-mx8mm/sl-mx8mm.c	2025-10-29 16:02:09.416952577 +0000
+++ b/board/kontron/sl-mx8mm/sl-mx8mm.c	2025-10-29 18:56:37.395144970 +0000
@@ -212,6 +212,18 @@
 		env_set("bootdelay", "0");
 	}

+	switch (get_boot_device()) {
+		case SPI_NOR_BOOT:
+		case MMC1_BOOT:
+			env_set("bootmed", "emmc");
+			break;
+		case SD2_BOOT:
+			env_set("bootmed", "sdcard");
+			break;
+		default:
+			env_set("bootmed", "unknown");
+	}
+
 	return 0;
 }

@@ -234,6 +246,13 @@
 	     boot_dev == MMC1_BOOT || boot_dev == MMC2_BOOT))
 		return ENVL_MMC;

+	/*
+	 * Make sure that the environment is loaded from
+	 * the eMMC even when booting from SPI flash.
+	 */
+	if (CONFIG_IS_ENABLED(ENV_IS_IN_MMC) && boot_dev == SPI_NOR_BOOT)
+		return ENVL_MMC;
+
 	if (CONFIG_IS_ENABLED(ENV_IS_IN_SPI_FLASH))
 		return ENVL_SPI_FLASH;

@@ -246,32 +265,29 @@
 #if defined(CONFIG_ENV_IS_IN_MMC)
 int board_mmc_get_env_dev(int devno)
 {
-	return devno;
+	/* Use eMMC0 when booting from SPI flash */
+	switch (get_boot_device()) {
+		case SPI_NOR_BOOT:
+			return 0;
+		default:
+			return devno;
+	}
 }

 uint mmc_get_env_part(struct mmc *mmc)
 {
-	/* part 1 (boot0) for eMMC, part 0 (user) for SD card */
-	return (mmc_get_env_dev() == 0) ? 1 : 0;
+	/* Allways use the eMMC normal partition */
+	return 0;
 }

 int mmc_get_env_addr(struct mmc *mmc, int copy, u32 *env_addr)
 {
-	/* use normal offset for SD card */
-	*env_addr = CONFIG_ENV_OFFSET;
-
-	/* use end of boot partition for eMMC */
-	if (mmc_get_env_dev() == 0)
-		*env_addr = mmc->capacity - CONFIG_ENV_SIZE - CONFIG_ENV_SIZE;
-
-	/* same for the redundant copy */
+	/* Use the same offsets for SD cards and eMMC */
 	if (copy) {
 		*env_addr = CONFIG_ENV_OFFSET_REDUND;
-
-		if (mmc_get_env_dev() == 0)
-			*env_addr = mmc->capacity - CONFIG_ENV_SIZE;
+	} else {
+		*env_addr = CONFIG_ENV_OFFSET;
 	}
-
 	return 0;
 }
 #endif
