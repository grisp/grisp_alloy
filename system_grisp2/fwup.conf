# Firmware configuration file for GRiSP 2 on Linux

require-fwup-version="1.0.0"

#
# Firmware metadata
#

# All of these can be overriden using environment variables of the same name.
#
#  Run 'fwup -m' to query values in a .fw file.
#  Use 'fw_printenv' to query values on the target.
#
# These are used by Grisp libraries to introspect.
define(GRISP_FW_PRODUCT, "Grisp 2 Firmware")
define(GRISP_FW_DESCRIPTION, "")
define(GRISP_FW_VERSION, "")
define(GRISP_FW_PLATFORM, "grisp2")
define(GRISP_FW_ARCHITECTURE, "arm-unknown-linux-gnueabihf")
define(GRISP_FW_AUTHOR, "Peer Stritzinger GmbH")
define(GRISP_FW_VCS_IDENTIFIER, "")

define(GRISP_FW_DEVPATH, "/dev/mmcblk0")
define(GRISP_FW_APPLICATION_PART0_DEVPATH, "/dev/mmcblk0p4") # Linux part number is 1-based
define(GRISP_FW_APPLICATION_PART0_FSTYPE, "f2fs")
define(GRISP_FW_APPLICATION_PART0_TARGET, "/root")
#define(GRISP_PROVISIONING, "${GRISP_TARGET_SYSTEM}/images/fwup_include/provisioning.conf")

# Default paths if not specified via the commandline
define(ROOTFS, "${GRISP_TARGET_SYSTEM}/images/rootfs.squashfs")

# This configuration file will create an image that
# has an MBR and the following layout:
#
# +----------------------------+
# | MBR                        |
# +----------------------------+
# | BareBox @ offset 1024      |
# +----------------------------+
# | BareBox Env @ offset ?     |
# +----------------------------+
# | U-Boot Env1 @ offset 18432 | ??????
# +----------------------------+
# | U-Boot Env2 @ offset 18560 | ??????
# +----------------------------+
# | p0: Boot partition (FAT32) |
# | zImage.a                   |
# +----------------------------+
# | p1: Rootfs A (squashfs)    |
# +----------------------------+
# | p2: Rootfs B (squashfs)    |
# +----------------------------+
# | p3: Application (f2fs)     |
# +----------------------------+

# The U-Boot environment is written directly to the SDCard/eMMC
define(UBOOT_ENV_OFFSET, 18432)
define(UBOOT_ENV_COUNT, 128)  # 64 KB

# The boot partition contains the zImage files
define(BOOT_PART_OFFSET, 20480)
define(BOOT_PART_COUNT, 28672)

# Let the rootfs have room to grow up to 140 MiB and align it to the nearest 1
# MB boundary
define(ROOTFS_A_PART_OFFSET, 63488)
define(ROOTFS_A_PART_COUNT, 286720)
define-eval(ROOTFS_B_PART_OFFSET, "${ROOTFS_A_PART_OFFSET} + ${ROOTFS_A_PART_COUNT}")
define(ROOTFS_B_PART_COUNT, ${ROOTFS_A_PART_COUNT})

# Application partition. This partition can occupy all of the remaining space.
# Size it to fit the destination.
define-eval(APP_PART_OFFSET, "${ROOTFS_B_PART_OFFSET} + ${ROOTFS_B_PART_COUNT}")
define(APP_PART_COUNT, 1048576)

# Firmware archive metadata
meta-product = ${GRISP_FW_PRODUCT}
meta-description = ${GRISP_FW_DESCRIPTION}
meta-version = ${GRISP_FW_VERSION}
meta-platform = ${GRISP_FW_PLATFORM}
meta-architecture = ${GRISP_FW_ARCHITECTURE}
meta-author = ${GRISP_FW_AUTHOR}
meta-vcs-identifier = ${GRISP_FW_VCS_IDENTIFIER}
meta-misc = ${GRISP_FW_MISC}

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
file-resource boot.conf {
    host-path = "${GRISP_SYSTEM}/images/fwup_include/boot.conf"
}
file-resource zImage {
    host-path = "${GRISP_SYSTEM}/images/zImage"
}
file-resource oftree {
    host-path = "${GRISP_SYSTEM}/images/imx6ull-grisp2.dtb"
}
file-resource rootfs.img {
    host-path = ${ROOTFS}

    # Error out if the rootfs size exceeds the partition size
    assert-size-lte = ${ROOTFS_A_PART_COUNT}
}

mbr mbr {
    partition 0 {
        block-offset = ${BOOT_PART_OFFSET}
        block-count = ${BOOT_PART_COUNT}
        type = 0xc # FAT32
        boot = true
    }
    partition 1 {
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_A_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 2 {
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count = ${ROOTFS_B_PART_COUNT}
        type = 0x83 # Linux
    }
    partition 3 {
        block-offset = ${APP_PART_OFFSET}
        block-count = ${APP_PART_COUNT}
        type = 0x83 # Linux
        expand = true
    }
}

uboot-environment uboot-env {
    block-offset = ${UBOOT_ENV_OFFSET}
    block-count = ${UBOOT_ENV_COUNT}
}

# This firmware task writes everything to the destination media.
# This should only be run at the factory to initialize a board!
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    on-init {
        mbr_write(mbr)

        fat_mkfs(${BOOT_PART_OFFSET}, ${BOOT_PART_COUNT})
        fat_setlabel(${BOOT_PART_OFFSET}, "BOOT")
        fat_mkdir(${BOOT_PART_OFFSET}, "loader")
        fat_mkdir(${BOOT_PART_OFFSET}, "loader/entries")
    }

    on-resource boot.conf {
        fat_write(${BOOT_PART_OFFSET}, "loader/entries/boot.conf")
    }

    on-resource zImage { fat_write(${BOOT_PART_OFFSET}, "zImage.a") }

    on-resource oftree { fat_write(${BOOT_PART_OFFSET}, "oftree") }

    on-resource rootfs.img {
        # write to the first rootfs partition
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
        # Clear out any old data in the B partition that might be mistaken for
        # a file system. This is mostly to avoid confusion in humans when
        # reprogramming SDCards with unknown contents.
        raw_memset(${ROOTFS_B_PART_OFFSET}, 256, 0xff)

        # Invalidate the application data partition so that it is guaranteed to
        # trigger the corrupt filesystem detection code on first boot and get
        # formatted. If this isn't done and an old SDCard is reused, the
        # application data could be in a weird state.
        raw_memset(${APP_PART_OFFSET}, 256, 0xff)
    }
}

# This firmware task always upgrade the A partition.
# A/B software upgrade is not yet supported.
task upgrade {
    on-init {
        info("Upgrading partition A")

        # Indicate that the entire partition can be cleared
        trim(${ROOTFS_A_PART_OFFSET}, ${ROOTFS_A_PART_COUNT})
    }

    on-resource zImage { fat_write(${BOOT_PART_OFFSET}, "zImage.a") }
    on-resource rootfs.img { raw_write(${ROOTFS_A_PART_OFFSET}) }

    on-finish {
    }

    on-error {
    }
}
